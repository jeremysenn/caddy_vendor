.container-fluid
  %br
  - if current_user.is_admin?
    %h4
      #player_total.pull-right
        = number_to_currency(@event.players_total_with_fee)
  %h3.lead
    =# @event.start.strftime("%-m/%-d/%y %l:%M %p")
    = @event.start.strftime("%-m/%-d/%y")

  - if browser.device.mobile?
    - @players.each do |player|
      .card.card-block
        %p.lead
          %strong Member
          = player.member.full_name
        - unless current_user.is_caddy?
          %p.lead
            %strong Caddy
            = player.caddy.full_name
        %p.lead 
          %strong Round
          = player.round
          %strong Type
          = player.caddy_type
        - unless player.note.blank?
          %p.lead
            %strong Guest
            = player.note
        - unless current_user.is_caddy?
          %p.lead
            %strong Transaction Fee
            $
            - unless player.paid?
              %a{href: nil, class: 'transaction_fee', "data-pk" => player.id, "data-url" => "/players/#{player.id}/update_transaction_fee", "data-value" => player.transaction_fee.blank? ? current_company.transaction_fee : player.transaction_fee}
                = number_with_precision("#{player.transaction_fee.blank? ? current_company.transaction_fee : player.transaction_fee}", precision: 2)
            - else
              = number_with_precision("#{player.transaction_fee.blank? ? current_company.transaction_fee : player.transaction_fee}", precision: 2)
        %p.lead
          = form_for Transfer.new, :html => {class: 'form-inline', role: 'form', id: 'transfer_form'} do |f|
            = f.hidden_field :customer_id, value: player.member_id
            = f.hidden_field :player_id, value: player.id
            = f.hidden_field :company_id, value: current_company.id
            = f.hidden_field :from_account, value: "#{player.member.primary? ? player.member.club_account(current_company.id).id : player.member.parent_customer.club_account(current_company.id).id}"
            = f.hidden_field :to_account, value: player.caddy.account.id unless player.caddy.account.blank?
            = f.hidden_field :fee, value: player.transaction_fee.blank? ? current_company.transaction_fee : player.transaction_fee , class: 'transaction_fee'
            = f.hidden_field :fee_to_account_id, value: current_user.company.account.id unless current_user.company.account.blank?
            =# f.hidden_field :caddy_fee, value: player.fee.blank? ? player.caddy_pay_rate : player.fee
            = f.hidden_field :amount, value: player.total, class: 'amount'
            .form-group
              %strong Charge
              .input-group
                .input-group-addon
                  %i.fa.fa-dollar
                = f.number_field :caddy_fee, value: player.fee.blank? ? player.caddy_pay_rate : player.fee, class: "form-control input-lg col-xs-6", pattern: "[0-9]*", inputmode: "numeric", readonly: (current_user.is_caddy? or player.paid? or player.payment_reversed?)
            .form-group
              %strong Tip
              .input-group
                .input-group-addon
                  %i.fa.fa-dollar
                = f.number_field :caddy_tip, value: player.tip.blank? ? 0 : player.tip, class: "form-control input-lg tip_field", pattern: "[0-9]*", inputmode: "numeric", readonly: (player.paid? or player.payment_reversed?)

            =# f.hidden_field :amount, value: player.total, class: 'amount'
            =# f.submit "Pay", :class => 'btn btn-success', data: { confirm: 'Are you sure you want to pay this?' } unless player.paid?
            - unless player.paid? or player.payment_reversed?
              .pull-right
                %button.btn.btn-success{id: 'pay_caddy_round_button', :type => "submit", data: {disable_with: "<i class='fa fa-spinner fa-spin'></i> Pay", confirm: 'Are you sure you want to pay this?'}} 
                  %i.fa.fa-dollar
                  - unless current_user.is_caddy?
                    Pay
                  - else
                    Add to Balance
          = "No account for Caddy" if player.caddy.account.blank?
          - if player.paid? and (player.transfer and player.transfer.reversable?) and not player.transfer.member_balance_cleared?
            = form_for player.transfer, :html => {class: 'form-horizontal', role: 'form', id: 'transfer_form'} do |f|
              = f.hidden_field :generate_reversal, value: true
              .pull-right
                = f.submit "Reverse", :class => 'btn btn-danger', data: { confirm: 'Are you sure you want to reverse this transfer?' }
          - elsif player.paid?
            .text-success Paid
          - if (player.transfer and player.transfer.reversed?)
            .text-danger Reversed

  - else
    .table-responsive
      %table.table.table-striped#players
        %thead
          %tr
            %th Member
            - unless current_user.is_caddy?
              %th Caddy
            %th Type
            %th Round
            %th Guest
            %th Charge
            %th Tip
            - unless current_user.is_caddy?
              %th Fee
            %th
        %tbody
          - @players.each do |player|
            %tr{class: "#{(player.transfer and player.transfer.reversed?) ? 'table-danger' : '' }"}
              %td= player.member.full_name
              - unless current_user.is_caddy?
                %td= player.caddy.full_name
              %td= player.caddy_type
              %td= player.round
              %td= player.note
              %td{class: "#{(player.paid? or current_user.is_caddy? or player.payment_reversed?) ? '' : 'text-primary'}"}
                $
                - unless player.paid? or current_user.is_caddy? or player.payment_reversed?
                  %a{href: nil, class: 'caddy_fee', "data-pk" => player.id, "data-url" => "/players/#{player.id}/update_caddy_fee", "data-value" => player.fee.blank? ? player.caddy_pay_rate : player.fee}
                    = number_with_precision("#{player.fee.blank? ? player.caddy_pay_rate : player.fee}", precision: 0)
                - else
                  = number_with_precision("#{player.fee.blank? ? player.caddy_pay_rate : player.fee}", precision: 0)
              %td{class: "#{(player.paid? or player.payment_reversed?) ? '' : 'text-primary'}"}
                $
                - unless player.paid? or player.payment_reversed?
                  %a{href: nil, class: 'tip', "data-pk" => player.id, "data-url" => "/players/#{player.id}/update_tip", "data-value" => player.tip.blank? ? '0' : player.tip}
                    = number_with_precision("#{player.tip.blank? ? '0' : player.tip}", precision: 0)
                - else
                  = number_with_precision("#{player.tip.blank? ? '0' : player.tip}", precision: 0)
              - unless current_user.is_caddy?
                %td{class: "#{(player.paid? or player.payment_reversed?) ? '' : 'text-primary'}"}
                  $
                  - unless player.paid? or player.payment_reversed?
                    %a{href: nil, class: 'transaction_fee', "data-pk" => player.id, "data-url" => "/players/#{player.id}/update_transaction_fee", "data-value" => player.transaction_fee.blank? ? current_company.transaction_fee : player.transaction_fee}
                      = number_with_precision("#{player.transaction_fee.blank? ? current_company.transaction_fee : player.transaction_fee}", precision: 2)
                  - else
                    = number_with_precision("#{player.transaction_fee.blank? ? current_company.transaction_fee : player.transaction_fee}", precision: 2)
              %td
                = form_for Transfer.new, :html => {class: 'form-horizontal', role: 'form', id: 'transfer_form'} do |f|
                  = f.hidden_field :customer_id, value: player.member_id
                  = f.hidden_field :player_id, value: player.id
                  = f.hidden_field :company_id, value: current_company.id
                  = f.hidden_field :from_account, value: "#{player.member.primary? ? player.member.club_account(current_company.id).id : player.member.parent_customer.club_account(current_company.id).id}"
                  = f.hidden_field :to_account, value: player.caddy.account.id unless player.caddy.account.blank?
                  = f.hidden_field :fee, value: player.transaction_fee.blank? ? current_company.transaction_fee : player.transaction_fee , class: 'transaction_fee'
                  = f.hidden_field :fee_to_account_id, value: current_user.company.account.id unless current_user.company.account.blank?
                  = f.hidden_field :caddy_fee, value: player.fee.blank? ? player.caddy_pay_rate : player.fee
                  = f.hidden_field :caddy_tip, value: player.tip.blank? ? 0 : player.tip
                  = f.hidden_field :amount, value: player.total, class: 'amount'
                  =# f.submit "Pay", :class => 'btn btn-success', data: { confirm: 'Are you sure you want to pay this?' } unless player.paid?
                  - unless player.paid? or player.payment_reversed?
                    %button.btn.btn-success{id: 'pay_caddy_round_button', :type => "submit", data: {disable_with: "<i class='fa fa-spinner fa-spin'></i> Pay", confirm: 'Are you sure you want to pay this?'}} 
                      %i.fa.fa-dollar
                      Pay
                = "No account for Caddy" if player.caddy.account.blank?
                - if player.paid? and (player.transfer and player.transfer.reversable?) and not player.transfer.member_balance_cleared?
                  = form_for player.transfer, :html => {class: 'form-horizontal', role: 'form', id: 'transfer_form'} do |f|
                    =# f.hidden_field :reversed, value: true
                    = f.hidden_field :generate_reversal, value: true
                    = f.submit "Reverse", :class => 'btn btn-danger', data: { confirm: 'Are you sure you want to reverse this transfer?' }
                - elsif player.paid?
                  .text-success Paid
                - if (player.transfer and player.transfer.reversed?)
                  .text-danger Reversed
                =# "Paid" if player.paid?
                =# link_to 'Rate', new_caddy_rating_path(player_id: player.id), class: 'btn btn-warning' unless player.caddy_rating.present?
  - if current_user.is_admin?             
    = link_to "Done", events_path, class: 'btn btn-primary'
  - elsif current_user.is_caddy?
    = link_to "Done", caddy_path(current_caddy), class: 'btn btn-primary'
  - else
    = link_to "Done", :back, class: 'btn btn-primary'